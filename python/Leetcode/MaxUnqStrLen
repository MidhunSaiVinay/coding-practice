# You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.

# Return the maximum possible length of s.

# A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

# Example 1:

# Input: arr = ["un","iq","ue"]
# Output: 4
# Explanation: All the valid concatenations are:
# - ""
# - "un"
# - "iq"
# - "ue"
# - "uniq" ("un" + "iq")
# - "ique" ("iq" + "ue")
# Maximum length is 4.
# Example 2:

# Input: arr = ["cha","r","act","ers"]
# Output: 6
# Explanation: Possible longest valid concatenations are "chaers" ("cha" + "ers") and "acters" ("act" + "ers").
# Example 3:

# Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
# Output: 26
# Explanation: The only string in arr has all 26 characters.
 

# Constraints:
# 1 <= arr.length <= 16
# 1 <= arr[i].length <= 26
#arr[i] contains only lowercase English letters.

def maxLength(arr):
        def is_unique(s):
            return len(s) == len(set(s))

        def find_max_length(index, current_str):
            # Base case: reached the end of the array
            if index == len(arr):
                return len(current_str) if is_unique(current_str) else 0

            # Case 1: include the current string at index
            length1 = find_max_length(index + 1, current_str + arr[index])

            # Case 2: exclude the current string at index
            length2 = find_max_length(index + 1, current_str)

            # Return the maximum length from the two cases
            return max(length1, length2)

        # Start the recursive function from the beginning of the array
        return find_max_length(0, '')